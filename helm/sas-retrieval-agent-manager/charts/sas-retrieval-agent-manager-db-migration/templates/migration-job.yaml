{{- $postgres_repo_base := "" -}}
{{- $goose_repo_base := "" -}}
{{- if and (hasKey .Values "global") (hasKey .Values.global "image") (hasKey .Values.global.image "repo") (hasKey .Values.global.image.repo "base") -}}
  {{- $postgres_repo_base = .Values.global.image.repo.base | default .Values.image.postgres.repo.base -}}
  {{- $goose_repo_base = .Values.global.image.repo.base | default .Values.image.goose.repo.base -}}
{{- else -}}
  {{- $postgres_repo_base = .Values.image.postgres.repo.base -}}
  {{- $goose_repo_base = .Values.image.goose.repo.base -}}
{{- end -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "sas-retrieval-agent-manager-db-migration.fullname" . }}
  labels:
    {{- include "sas-retrieval-agent-manager-db-migration.labels" . | nindent 4 }}
  annotations:
    argocd.argoproj.io/sync-options: Skip
spec:
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "sas-retrieval-agent-manager-db-migration.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with uniq (concat (.Values.imagePullSecrets | default (list)) (.Values.global.imagePullSecrets | default (list))) }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "sas-retrieval-agent-manager-db-migration.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: wait-for-db
          command:
            - "/bin/sh"
            - "-c"
            - "/scripts/wait_for_database.sh"
          image: "{{ $postgres_repo_base }}/{{ .Values.image.postgres.repo.path }}:{{ .Values.image.postgres.tag }}"
          imagePullPolicy: {{ .Values.image.postgres.pullPolicy }}
          env:
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  key: user
                  name: migration-db-credentials
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: migration-db-credentials
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  key: host
                  name: db-connection
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  key: port
                  name: db-connection
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  key: db
                  name: db-application
            - name: DB_SCHEMA
              valueFrom:
                configMapKeyRef:
                  key: schema
                  name: db-application
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - mountPath: "/scripts"
              name: scripts
              readOnly: true
      containers:
        - name: db-initialization
          image: "{{ $goose_repo_base }}/{{ .Values.image.goose.repo.path }}:{{ .Values.image.goose.tag | default "15" }}"
          imagePullPolicy: {{ .Values.image.goose.pullPolicy }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  key: host
                  name: db-connection
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  key: port
                  name: db-connection
            - name: DB_SSLMODE
              valueFrom:
                configMapKeyRef:
                  key: sslmode
                  name: db-connection
            - name: APP_DB_NAME
              valueFrom:
                configMapKeyRef:
                  key: db
                  name: db-application
            - name: APP_DB_SCHEMA
              valueFrom:
                configMapKeyRef:
                  key: schema
                  name: db-application
            - name: DB_SECRETS_PUBLIC_KEY
              valueFrom:
                configMapKeyRef:
                  key: public
                  name: gpg-public-key
            - name: MIGRATE_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  key: user
                  name: migration-db-credentials
            - name: MIGRATE_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: migration-db-credentials
            - name: PGREST_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  key: user
                  name: application-db-credentials
            - name: VJOB_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  key: user
                  name: vectorization-job-db-credentials
            - name: DB_AUTH_ROLE_ADMINS
              valueFrom:
                configMapKeyRef:
                  key: adminRole
                  name: application-roles
            - name: DB_AUTH_ROLE_USERS
              valueFrom:
                configMapKeyRef:
                  key: userRole
                  name: application-roles
            {{- if .Values.global.configuration.vectorStore.enabled }}
            - name: ENABLE_VECTOR_STORE
              valueFrom:
                configMapKeyRef:
                  key: enabled
                  name: db-vector-store
            - name: VECTOR_DB_NAME
              valueFrom:
                configMapKeyRef:
                  key: db
                  name: db-vector-store
            - name: VECTOR_DB_SCHEMA
              valueFrom:
                configMapKeyRef:
                  key: schema
                  name: db-vector-store
            - name: VECTOR_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  key: user
                  name: vector-store-db-credentials
            - name: VECTOR_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: vector-store-db-credentials
            {{- end }}
            {{- if .Values.global.configuration.weaviate.enabled }}
            - name: ENABLE_LOCAL_WEAVIATE
              valueFrom:
                configMapKeyRef:
                  key: enabled
                  name: db-weaviate
            {{- end }}
      restartPolicy: OnFailure
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: scripts
          configMap:
            name: {{ .Chart.Name }}-scripts
            defaultMode: 0777
  backoffLimit: 1000