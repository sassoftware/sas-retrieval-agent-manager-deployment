{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "additionalProperties": false,
  "properties": {
    "affinity": {
      "additionalProperties": false,
      "description": "Map of node/pod affinities",
      "properties": {
        "nodeAffinity": {
          "additionalProperties": false,
          "properties": {
            "preferredDuringSchedulingIgnoredDuringExecution": {
              "items": {
                "anyOf": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "preference": {
                        "additionalProperties": false,
                        "properties": {
                          "matchExpressions": {
                            "items": {
                              "anyOf": [
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "key": {
                                      "default": "sas.com/deployment",
                                      "required": [],
                                      "title": "key",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "default": "In",
                                      "required": [],
                                      "title": "operator",
                                      "type": "string"
                                    },
                                    "values": {
                                      "items": {
                                        "anyOf": [
                                          {
                                            "required": [],
                                            "type": "string"
                                          }
                                        ],
                                        "required": []
                                      },
                                      "required": [],
                                      "title": "values",
                                      "type": "array"
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "operator",
                                    "values"
                                  ],
                                  "type": "object"
                                }
                              ],
                              "required": []
                            },
                            "required": [],
                            "title": "matchExpressions",
                            "type": "array"
                          }
                        },
                        "required": [
                          "matchExpressions"
                        ],
                        "title": "preference",
                        "type": "object"
                      },
                      "weight": {
                        "default": 1,
                        "required": [],
                        "title": "weight",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "weight",
                      "preference"
                    ],
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "preference": {
                        "additionalProperties": false,
                        "properties": {
                          "matchExpressions": {
                            "items": {
                              "anyOf": [
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "key": {
                                      "default": "workload.sas.com/class",
                                      "required": [],
                                      "title": "key",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "default": "In",
                                      "required": [],
                                      "title": "operator",
                                      "type": "string"
                                    },
                                    "values": {
                                      "items": {
                                        "anyOf": [
                                          {
                                            "required": [],
                                            "type": "string"
                                          }
                                        ],
                                        "required": []
                                      },
                                      "required": [],
                                      "title": "values",
                                      "type": "array"
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "operator",
                                    "values"
                                  ],
                                  "type": "object"
                                }
                              ],
                              "required": []
                            },
                            "required": [],
                            "title": "matchExpressions",
                            "type": "array"
                          }
                        },
                        "required": [
                          "matchExpressions"
                        ],
                        "title": "preference",
                        "type": "object"
                      },
                      "weight": {
                        "default": 2,
                        "required": [],
                        "title": "weight",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "weight",
                      "preference"
                    ],
                    "type": "object"
                  }
                ],
                "required": []
              },
              "required": [],
              "title": "preferredDuringSchedulingIgnoredDuringExecution",
              "type": "array"
            }
          },
          "required": [
            "preferredDuringSchedulingIgnoredDuringExecution"
          ],
          "title": "nodeAffinity",
          "type": "object"
        }
      },
      "required": [
        "nodeAffinity"
      ],
      "title": "affinity",
      "type": [
        "object",
        "null"
      ]
    },
    "config": {
      "additionalProperties": false,
      "description": "File Browser application specific configuration",
      "properties": {
        "address": {
          "default": "",
          "description": "Address to bind the server to (empty means all interfaces)",
          "required": [],
          "title": "address",
          "type": "string"
        },
        "baseURL": {
          "default": "/files",
          "description": "Base URL path for the filebrowser application",
          "required": [],
          "title": "baseURL",
          "type": "string"
        },
        "database": {
          "default": "/db/filebrowser.db",
          "description": "Path to the SQLite database file for storing filebrowser configuration",
          "required": [],
          "title": "database",
          "type": "string"
        },
        "log": {
          "default": "stdout",
          "description": "Log output destination (stdout, stderr, or file path)",
          "enum": [
            "stdout",
            "stderr",
            "file"
          ],
          "required": [],
          "title": "log"
        },
        "port": {
          "default": 18080,
          "description": "The port that will be exposed by this service.",
          "required": [],
          "title": "port",
          "type": "integer"
        },
        "root": {
          "default": "/mnt/data",
          "description": "Root directory that filebrowser will serve and manage files from",
          "required": [],
          "title": "root",
          "type": "string"
        }
      },
      "required": [
        "port",
        "baseURL",
        "address",
        "log",
        "database",
        "root"
      ],
      "title": "config",
      "type": "object"
    },
    "db": {
      "additionalProperties": false,
      "description": "Database configuration for Filebrowser",
      "properties": {
        "pvc": {
          "additionalProperties": false,
          "description": "Database persistence configuration",
          "properties": {
            "accessModes": {
              "description": "Access modes for the database PVC",
              "items": {
                "required": [],
                "type": "string"
              },
              "required": [],
              "title": "accessModes",
              "type": "array"
            },
            "enabled": {
              "default": true,
              "description": "Enable persistence for database",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "size": {
              "default": "256Mi",
              "description": "Size for the database PVC",
              "required": [],
              "title": "size",
              "type": "string"
            },
            "storageClassName": {
              "default": "",
              "description": "Storage class name for the database PVC",
              "required": [],
              "title": "storageClassName",
              "type": "string"
            }
          },
          "required": [
            "enabled",
            "storageClassName",
            "accessModes",
            "size"
          ],
          "title": "pvc",
          "type": "object"
        }
      },
      "required": [
        "pvc"
      ],
      "title": "db",
      "type": "object"
    },
    "enabled": {
      "default": false,
      "description": "Enable the actual filebrowser deployment. Set to true to deploy the filebrowser component",
      "required": [],
      "title": "enabled",
      "type": "boolean"
    },
    "fullnameOverride": {
      "default": "sas-retrieval-agent-manager-filebrowser",
      "description": "String to fully override the fullname template with a string",
      "required": [],
      "title": "fullnameOverride",
      "type": "string"
    },
    "global": {
      "description": "Global values are values that can be accessed from any chart or subchart by exactly the same name.",
      "required": [],
      "title": "global",
      "type": "object"
    },
    "image": {
      "additionalProperties": false,
      "description": "Container image configuration for Filebrowser and related services",
      "properties": {
        "pullPolicy": {
          "default": "IfNotPresent",
          "description": "Container image pull policy",
          "enum": [
            "Always",
            "Never",
            "IfNotPresent"
          ],
          "required": [],
          "title": "pullPolicy"
        },
        "repo": {
          "additionalProperties": false,
          "description": "Container image configuration",
          "properties": {
            "base": {
              "default": "docker.io",
              "description": "Container registry base URL",
              "required": [],
              "title": "base",
              "type": "string"
            },
            "path": {
              "default": "filebrowser/filebrowser",
              "description": "Container image path/name",
              "required": [],
              "title": "path",
              "type": "string"
            }
          },
          "required": [
            "base",
            "path"
          ],
          "title": "repo",
          "type": "object"
        },
        "tag": {
          "default": "v2.42.1",
          "description": "Overrides the image tag whose default is the chart appVersion.",
          "required": [],
          "title": "tag",
          "type": "string"
        }
      },
      "required": [
        "repo",
        "tag"
      ],
      "title": "image",
      "type": "object"
    },
    "imagePullSecrets": {
      "default": [],
      "description": "Array of imagePullSecrets in the namespace for pulling images",
      "items": {
        "properties": {
          "name": {
            "required": [],
            "type": "string"
          }
        },
        "required": [],
        "type": "object"
      },
      "required": [],
      "title": "imagePullSecrets",
      "type": "array"
    },
    "ingress": {
      "additionalProperties": false,
      "description": "Ingress configuration for external access to Filebrowser",
      "properties": {
        "annotations": {
          "additionalProperties": false,
          "default": {
            "nginx.ingress.kubernetes.io/auth-signin": "https://$host/SASRetrievalAgentManager/oauth2/start?rd=$escaped_request_uri",
            "nginx.ingress.kubernetes.io/auth-url": "https://$host/SASRetrievalAgentManager/oauth2/auth",
            "nginx.ingress.kubernetes.io/proxy-body-size": "500m",
            "nginx.ingress.kubernetes.io/proxy-buffer-size": "16k",
            "nginx.ingress.kubernetes.io/rewrite-target": "/$2",
            "nginx.ingress.kubernetes.io/ssl-redirect": "true"
          },
          "description": "Annotations for the Ingress",
          "properties": {
            "nginx.ingress.kubernetes.io/auth-signin": {
              "default": "https://$host/SASRetrievalAgentManager/oauth2/start?rd=$escaped_request_uri",
              "description": "OAuth2 authentication sign-in URL",
              "required": [],
              "title": "nginx.ingress.kubernetes.io/auth-signin",
              "type": "string"
            },
            "nginx.ingress.kubernetes.io/auth-url": {
              "default": "https://$host/SASRetrievalAgentManager/oauth2/auth",
              "description": "OAuth2 authentication validation URL",
              "required": [],
              "title": "nginx.ingress.kubernetes.io/auth-url",
              "type": "string"
            },
            "nginx.ingress.kubernetes.io/proxy-body-size": {
              "default": "500m",
              "description": "Maximum allowed size of client request body (for file uploads)",
              "required": [],
              "title": "nginx.ingress.kubernetes.io/proxy-body-size",
              "type": "string"
            },
            "nginx.ingress.kubernetes.io/proxy-buffer-size": {
              "default": "16k",
              "description": "Size of buffer used for reading the first part of response received from proxied server",
              "required": [],
              "title": "nginx.ingress.kubernetes.io/proxy-buffer-size",
              "type": "string"
            },
            "nginx.ingress.kubernetes.io/rewrite-target": {
              "default": "/$2",
              "description": "URL rewrite rule to strip the prefix path",
              "required": [],
              "title": "nginx.ingress.kubernetes.io/rewrite-target",
              "type": "string"
            },
            "nginx.ingress.kubernetes.io/ssl-redirect": {
              "default": "true",
              "description": "Force SSL redirect",
              "required": [],
              "title": "nginx.ingress.kubernetes.io/ssl-redirect",
              "type": "string"
            }
          },
          "required": [
            "nginx.ingress.kubernetes.io/auth-signin",
            "nginx.ingress.kubernetes.io/auth-url",
            "nginx.ingress.kubernetes.io/proxy-body-size",
            "nginx.ingress.kubernetes.io/proxy-buffer-size",
            "nginx.ingress.kubernetes.io/rewrite-target",
            "nginx.ingress.kubernetes.io/ssl-redirect"
          ],
          "title": "annotations",
          "type": "object"
        },
        "className": {
          "default": "nginx",
          "description": "Class name of the Ingress",
          "required": [],
          "title": "className",
          "type": "string"
        },
        "enabled": {
          "default": true,
          "description": "Enable ingress for external access to API",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "paths": {
          "description": "If useGlobal = True\nIngress path configuration when useGlobal is true",
          "items": {
            "properties": {
              "host": {
                "required": [],
                "type": "string"
              },
              "paths": {
                "items": {
                  "properties": {
                    "path": {
                      "default": "/SASRetrievalAgentManager/files(/|$)(.*)",
                      "required": [],
                      "type": "string"
                    },
                    "pathType": {
                      "default": "ImplementationSpecific",
                      "required": [],
                      "type": "string"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "required": [],
                "type": [
                  "array",
                  "null"
                ]
              }
            },
            "required": [],
            "type": "object"
          },
          "required": [],
          "title": "paths",
          "type": [
            "array",
            "null"
          ]
        },
        "tls": {
          "default": [
            {
              "path": "/SASRetrievalAgentManager/auth(/(realms|resources)/(.*))$",
              "pathType": "ImplementationSpecific"
            }
          ],
          "description": "TLS configuration for ingress",
          "items": {
            "properties": {
              "hosts": {
                "items": {
                  "required": [],
                  "type": "string"
                },
                "required": [],
                "type": "array"
              },
              "secretName": {
                "required": [],
                "type": "string"
              }
            },
            "required": [],
            "type": "object"
          },
          "required": [],
          "title": "tls",
          "type": [
            "array",
            "null"
          ]
        },
        "useGlobal": {
          "default": false,
          "description": "Use global ingress configuration instead of local hosts configuration",
          "required": [],
          "title": "useGlobal",
          "type": "boolean"
        }
      },
      "required": [
        "useGlobal",
        "enabled",
        "className"
      ],
      "title": "ingress",
      "type": "object"
    },
    "initContainers": {
      "default": [],
      "description": "Set of initContainers for the deployment",
      "items": {
        "required": [],
        "type": "object"
      },
      "required": [],
      "title": "initContainers",
      "type": "array"
    },
    "livenessProbe": {
      "additionalProperties": true,
      "description": "Liveness probe configuration (disabled by default, enable if needed)",
      "required": [],
      "title": "livenessProbe",
      "type": [
        "object",
        "null"
      ]
    },
    "nameOverride": {
      "default": "filebrowser",
      "description": "String to partially override the fullname template with a string (will prepend the release name)",
      "required": [],
      "title": "nameOverride",
      "type": "string"
    },
    "nodeSelector": {
      "additionalProperties": false,
      "description": "Node labels for pod assignment",
      "required": [],
      "title": "nodeSelector",
      "type": [
        "object",
        "null"
      ]
    },
    "podAnnotations": {
      "additionalProperties": false,
      "default": {},
      "description": "Annotations to add to the pods",
      "required": [],
      "title": "podAnnotations",
      "type": "object"
    },
    "podLabels": {
      "additionalProperties": false,
      "default": {
        "sas.com/deployment": "sas-retrieval-agent-manager",
        "workload.sas.com/class": "ram"
      },
      "description": "Labels to add to the pods",
      "properties": {
        "sas.com/deployment": {
          "default": "sas-retrieval-agent-manager",
          "required": [],
          "title": "sas.com/deployment",
          "type": "string"
        },
        "workload.sas.com/class": {
          "default": "ram",
          "required": [],
          "title": "workload.sas.com/class",
          "type": "string"
        }
      },
      "required": [
        "sas.com/deployment",
        "workload.sas.com/class"
      ],
      "title": "podLabels",
      "type": "object"
    },
    "podSecurityContext": {
      "additionalProperties": false,
      "default": {
        "fsGroup": 10001,
        "runAsGroup": 10001,
        "runAsNonRoot": true,
        "runAsUser": 10001,
        "seccompProfile": {
          "type": "RuntimeDefault"
        }
      },
      "description": "The security context for the pods",
      "properties": {
        "appArmorProfile": {
          "description": "appArmorProfile is the AppArmor options to use by the containers in this pod.",
          "properties": {
            "localhostProfile": {
              "required": [],
              "type": "string"
            },
            "type": {
              "enum": [
                "Localhost",
                "RuntimeDefault"
              ],
              "required": []
            }
          },
          "required": [],
          "type": [
            "object",
            "null"
          ]
        },
        "fsGroup": {
          "default": 10001,
          "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\\n\\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\\n\\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
          "format": "int64",
          "required": [],
          "type": [
            "integer",
            "null"
          ]
        },
        "fsGroupChangePolicy": {
          "default": "Always",
          "enum": [
            "OnRootMismatch",
            "Always"
          ],
          "required": []
        },
        "runAsGroup": {
          "default": 10001,
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
          "format": "int64",
          "required": [],
          "type": [
            "integer",
            "null"
          ]
        },
        "runAsNonRoot": {
          "default": true,
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "required": [],
          "type": [
            "boolean",
            "null"
          ]
        },
        "runAsUser": {
          "default": 10001,
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
          "format": "int64",
          "required": [],
          "type": [
            "integer",
            "null"
          ]
        },
        "seLinuxOptions": {
          "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
          "properties": {
            "level": {
              "required": [],
              "type": "string"
            },
            "role": {
              "required": [],
              "type": "string"
            },
            "type": {
              "required": [],
              "type": "string"
            },
            "user": {
              "required": [],
              "type": "string"
            }
          },
          "required": [],
          "type": [
            "object",
            "null"
          ]
        },
        "seccompProfile": {
          "description": "The seccomp options to use by the containers in this pod.",
          "properties": {
            "localhostProfile": {
              "required": [],
              "type": "string"
            },
            "type": {
              "enum": [
                "Localhost",
                "RuntimeDefault"
              ],
              "required": []
            }
          },
          "required": [],
          "type": [
            "object",
            "null"
          ]
        },
        "supplementalGroups": {
          "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID and fsGroup (if specified).  If the SupplementalGroupsPolicy feature is enabled, the supplementalGroupsPolicy field determines whether these are in addition to or instead of any group memberships defined in the container image. If unspecified, no additional groups are added, though group memberships defined in the container image may still be used, depending on the supplementalGroupsPolicy field.",
          "items": {
            "format": "int64",
            "required": [],
            "type": [
              "integer",
              "null"
            ]
          },
          "required": [],
          "type": [
            "array",
            "null"
          ]
        },
        "supplementalGroupsPolicy": {
          "default": "Merge",
          "description": "Defines how supplemental groups of the first container processes are calculated. Valid values are \"Merge\" and \"Strict\". If not specified, \"Merge\" is used. (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled and the container runtime must implement support for this feature.",
          "enum": [
            "Merge",
            "Strict"
          ],
          "required": []
        },
        "sysctls": {
          "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.",
          "items": {
            "properties": {
              "name": {
                "required": [],
                "type": "string"
              },
              "value": {
                "required": [],
                "type": "string"
              }
            },
            "required": [],
            "type": "object"
          },
          "required": [],
          "type": [
            "array",
            "null"
          ]
        }
      },
      "required": [],
      "title": "podSecurityContext",
      "type": [
        "object",
        "null"
      ]
    },
    "readinessProbe": {
      "additionalProperties": true,
      "description": "Readiness probe configuration",
      "properties": {
        "httpGet": {
          "additionalProperties": false,
          "properties": {
            "path": {
              "default": "/health",
              "required": [],
              "title": "path",
              "type": "string"
            },
            "port": {
              "default": "http",
              "required": [],
              "title": "port",
              "type": "string"
            }
          },
          "required": [
            "path",
            "port"
          ],
          "title": "httpGet",
          "type": "object"
        }
      },
      "required": [
        "httpGet"
      ],
      "title": "readinessProbe",
      "type": [
        "object",
        "null"
      ]
    },
    "replicaCount": {
      "default": 1,
      "description": "Number of replicas to run. Chart is not designed to scale horizontally, use at your own risk",
      "required": [],
      "title": "replicaCount",
      "type": "integer"
    },
    "resources": {
      "additionalProperties": false,
      "description": "The resources to allocate for the container",
      "properties": {
        "claims": {
          "items": {
            "properties": {
              "name": {
                "required": [],
                "type": "string"
              },
              "request": {
                "required": [],
                "type": "string"
              }
            },
            "required": [],
            "type": "object"
          },
          "required": [],
          "type": "array"
        },
        "limits": {
          "required": [],
          "type": "object"
        },
        "requests": {
          "required": [],
          "type": "object"
        }
      },
      "required": [],
      "title": "resources",
      "type": "object"
    },
    "rootDir": {
      "additionalProperties": true,
      "properties": {
        "hostPath": {
          "additionalProperties": false,
          "description": "Host path configuration (only used when type is 'hostPath')",
          "properties": {
            "path": {
              "default": "/mnt/data",
              "description": "Path on the host to mount",
              "required": [],
              "title": "path",
              "type": "string"
            }
          },
          "required": [
            "path"
          ],
          "title": "hostPath",
          "type": "object"
        },
        "pvc": {
          "additionalProperties": false,
          "description": "Persistent Volume Claim configuration (only used when type is 'pvc')",
          "properties": {
            "accessModes": {
              "description": "Access modes for the root directory PVC",
              "items": {
                "required": [],
                "type": "string"
              },
              "required": [],
              "title": "accessModes",
              "type": "array"
            },
            "createStorageClass": {
              "default": true,
              "description": "Whether to create the storage class if it doesn't exist",
              "required": [],
              "title": "createStorageClass",
              "type": "boolean"
            },
            "name": {
              "default": "vhub-pv",
              "description": "Name for the PVC",
              "required": [],
              "title": "name",
              "type": "string"
            },
            "size": {
              "default": "20Gi",
              "description": "Size for the root directory PVC",
              "required": [],
              "title": "size",
              "type": "string"
            },
            "storageClassName": {
              "default": "azurefile-sas",
              "description": "Storage class name for the root directory PVC",
              "required": [],
              "title": "storageClassName",
              "type": "string"
            }
          },
          "required": [
            "name",
            "storageClassName",
            "createStorageClass",
            "accessModes",
            "size"
          ],
          "title": "pvc",
          "type": "object"
        },
        "readOnly": {
          "default": false,
          "description": "Mount the root directory in read-only mode",
          "required": [],
          "title": "readOnly",
          "type": "boolean"
        },
        "type": {
          "default": "pvc",
          "description": "Type of rootDir mount. Valid values are [pvc, hostPath, emptyDir]",
          "enum": [
            "pvc",
            "hostPath",
            "emptyDir"
          ],
          "required": [],
          "title": "type"
        }
      },
      "required": [
        "type",
        "readOnly",
        "hostPath",
        "pvc"
      ],
      "title": "rootDir",
      "type": "object"
    },
    "securityContext": {
      "additionalProperties": false,
      "default": {
        "allowPrivilegeEscalation": false,
        "capabilities": {
          "add": [],
          "drop": [
            "ALL"
          ]
        },
        "privileged": false,
        "readOnlyRootFilesystem": true,
        "runAsGroup": 10001,
        "runAsNonRoot": true,
        "runAsUser": 10001,
        "seccompProfile": {
          "type": "RuntimeDefault"
        }
      },
      "description": "The security context for the application container",
      "properties": {
        "allowPrivilegeEscalation": {
          "default": false,
          "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is run as Privileged or has CAP_SYS_ADMIN",
          "required": [],
          "type": "boolean"
        },
        "appArmorProfile": {
          "description": "appArmorProfile is the AppArmor options to use by this container. If set, this profile overrides the pod's appArmorProfile.",
          "properties": {
            "localhostProfile": {
              "required": [],
              "type": "string"
            },
            "type": {
              "enum": [
                "Localhost",
                "RuntimeDefault"
              ],
              "required": []
            }
          },
          "required": [],
          "type": [
            "object",
            "null"
          ]
        },
        "capabilities": {
          "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.",
          "properties": {
            "add": {
              "default": [],
              "description": "Added capabilities",
              "items": {
                "required": [],
                "type": "string"
              },
              "required": [],
              "type": [
                "array",
                "null"
              ]
            },
            "drop": {
              "default": [
                "ALL"
              ],
              "description": "Dropped capabilities",
              "items": {
                "required": [],
                "type": "string"
              },
              "required": [],
              "type": [
                "array",
                "null"
              ]
            }
          },
          "required": [],
          "type": [
            "object",
            "null"
          ]
        },
        "privileged": {
          "default": false,
          "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host.",
          "required": [],
          "type": [
            "boolean",
            "null"
          ]
        },
        "procMount": {
          "description": "procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.",
          "required": [],
          "type": [
            "string",
            "null"
          ]
        },
        "readOnlyRootFilesystem": {
          "default": false,
          "description": "Whether this container has a read-only root filesystem. Default is false.",
          "required": [],
          "type": [
            "boolean",
            "null"
          ]
        },
        "runAsGroup": {
          "default": 10001,
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
          "format": "int64",
          "required": [],
          "type": [
            "integer",
            "null"
          ]
        },
        "runAsNonRoot": {
          "default": true,
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "required": [],
          "type": [
            "boolean",
            "null"
          ]
        },
        "runAsUser": {
          "default": 10001,
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
          "format": "int64",
          "required": [],
          "type": [
            "integer",
            "null"
          ]
        },
        "seLinuxOptions": {
          "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
          "properties": {
            "level": {
              "required": [],
              "type": "string"
            },
            "role": {
              "required": [],
              "type": "string"
            },
            "type": {
              "required": [],
              "type": "string"
            },
            "user": {
              "required": [],
              "type": "string"
            }
          },
          "required": [],
          "type": [
            "object",
            "null"
          ]
        },
        "seccompProfile": {
          "description": "The seccomp options to use by the containers in this pod.",
          "properties": {
            "localhostProfile": {
              "required": [],
              "type": "string"
            },
            "type": {
              "enum": [
                "Localhost",
                "RuntimeDefault"
              ],
              "required": []
            }
          },
          "required": [],
          "type": [
            "object",
            "null"
          ]
        }
      },
      "required": [],
      "title": "securityContext",
      "type": [
        "object",
        "null"
      ]
    },
    "service": {
      "additionalProperties": false,
      "description": "Kubernetes Service configuration",
      "properties": {
        "port": {
          "default": 80,
          "description": "The port that will be exposed by this service.",
          "required": [],
          "title": "port",
          "type": "integer"
        },
        "type": {
          "default": "ClusterIP",
          "description": "Service type must be one of ClusterIP, NodePort, or LoadBalancer.",
          "enum": [
            "ClusterIP",
            "NodePort",
            "LoadBalancer"
          ],
          "required": [],
          "title": "type"
        }
      },
      "required": [
        "type",
        "port"
      ],
      "title": "service",
      "type": "object"
    },
    "serviceAccount": {
      "additionalProperties": false,
      "description": "Service account configuration for API",
      "properties": {
        "annotations": {
          "additionalProperties": false,
          "default": {},
          "description": "Annotations to add to the service account",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "create": {
          "default": true,
          "description": "Specifies whether a service account should be created",
          "required": [],
          "title": "create",
          "type": "boolean"
        },
        "name": {
          "default": "",
          "description": "The name of the service account to use. If not set and create is true, a name is generated using the fullname template",
          "required": [],
          "title": "name",
          "type": "string"
        }
      },
      "required": [
        "create"
      ],
      "title": "serviceAccount",
      "type": "object"
    },
    "strategy": {
      "additionalProperties": false,
      "description": "Deployment strategy to use (Recreate is recommended for stateful applications)",
      "properties": {
        "type": {
          "default": "Recreate",
          "required": [],
          "title": "type",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "title": "strategy",
      "type": "object"
    },
    "tolerations": {
      "description": "Tolerations for pod assignment",
      "items": {
        "required": []
      },
      "required": [],
      "title": "tolerations",
      "type": [
        "array",
        "null"
      ]
    }
  },
  "required": [
    "enabled",
    "replicaCount",
    "image",
    "nameOverride",
    "fullnameOverride",
    "serviceAccount",
    "service",
    "ingress",
    "resources",
    "rootDir",
    "db",
    "strategy",
    "livenessProbe",
    "readinessProbe",
    "initContainers",
    "config"
  ],
  "type": "object"
}