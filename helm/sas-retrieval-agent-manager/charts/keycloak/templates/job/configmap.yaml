---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fetch-keycloak-certs
  labels:
    {{- include "keycloak.oauthProxy.labels" . | nindent 4 }}
data:
  init.sh: |
    #!/bin/bash

    KUBECTL=`which kubectl`
    cd /workdir

    NAMESPACE="{{ .Release.Namespace }}"
    SECRET_NAME="keycloak-certs"
    CERTS_FILE="/workdir/certs.json"
    SECRET="/workdir/secret.yaml"
    LABELS=(
      "app.kubernetes.io/instance={{ .Release.Name }}"
      "app.kubernetes.io/managed-by={{ .Release.Service }}"
      "app.kubernetes.io/name={{ .Chart.Name }}"
      "app.kubernetes.io/version={{ .Chart.AppVersion }}"
      "helm.sh/chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    )
    ANNOTATIONS=(
      "meta.helm.sh/release-name={{ .Release.Name }}"
      "meta.helm.sh/release-namespace={{ .Release.Namespace }}"
    )
    while [ $(curl -sw '%{http_code}' "http://{{ include "keycloak.fullname" . }}:{{ .Values.service.port }}{{ with (first .Values.ingress.hosts) }}{{ with (first .paths) }}{{ regexReplaceAll "\\(.*" .path "" }}{{ end }}{{ end }}/realms/{{ .Values.global.configuration.keycloak.realm }}" -o /dev/null) -ne 200 ]; do
      echo "Waiting for ID provider to reach ready state...";
      sleep 15;
    done
    echo http://{{ include "keycloak.fullname" . }}:{{ .Values.service.port }}{{ with (first .Values.ingress.hosts) }}{{ with (first .paths) }}{{ regexReplaceAll "\\(.*" .path "" }}{{ end }}{{ end }}/realms/{{ .Values.global.configuration.keycloak.realm }}/protocol/openid-connect/certs
    curl -s http://{{ include "keycloak.fullname" . }}:{{ .Values.service.port }}{{ with (first .Values.ingress.hosts) }}{{ with (first .paths) }}{{ regexReplaceAll "\\(.*" .path "" }}{{ end }}{{ end }}/realms/{{ .Values.global.configuration.keycloak.realm }}/protocol/openid-connect/certs > $CERTS_FILE
    cat $CERTS_FILE

    # Create the secret YAML
    ${KUBECTL} create secret generic $SECRET_NAME -n $NAMESPACE --from-file=$CERTS_FILE --dry-run=client -o yaml > $SECRET

    # Apply the secret
    ${KUBECTL} apply -f $SECRET

    # Add labels
    for label in "${LABELS[@]}"; do
      ${KUBECTL} label secret $SECRET_NAME -n $NAMESPACE $label --overwrite
    done

    # Add annotations
    for annotation in "${ANNOTATIONS[@]}"; do
      ${KUBECTL} annotate secret $SECRET_NAME -n $NAMESPACE $annotation --overwrite
    done

    # Clean up
    rm $SECRET
