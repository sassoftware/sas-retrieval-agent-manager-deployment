apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Chart.Name }}-scripts
  labels:
    {{- include "sas-retrieval-agent-manager-db-init.labels" . | nindent 4 }}
data:
{{- if  .Values.global.configuration.database.initializeDb }}
  initialize_database.sh: |-
    #!/bin/bash

    export PSQL=`which psql`

    USER_FILE="/secret/admin/user"
    PASSWORD_FILE="/secret/admin/password"
    SCRIPT_DIR="/scripts"
    
    DB_HOST=$(< /config/db/host)
    DB_PORT=$(< /config/db/port)
    DB_NAME="postgres"
    export INIT_DB_NAME="$DB_NAME"
    export DB_SSL_MODE=$(< /config/db/sslmode)
    echo "Connecting to DB at $DB_HOST:$DB_PORT with SSL mode $DB_SSL_MODE"

    # Check if both files exist
    if [[ -f "$USER_FILE" && -f "$PASSWORD_FILE" ]]; then
        USER=$(<"$USER_FILE")
        PASSWORD=$(<"$PASSWORD_FILE")
    else
        echo "Credential files are missing. Skipping script execution."
        exit 0
    fi

    # Define PostgreSQL connection parameters
    PGHOST="${DB_HOST}"
    PGPORT="${DB_PORT}"
    PGDATABASE="${PGDATABASE:-postgres}"

    # Check if credentials are not empty
    if [[ -n "$USER" && -n "$PASSWORD" ]]; then
        echo "Credentials found. Checking PostgreSQL readiness..."

        # Export password for pg_isready and scripts that follow
        export PGPASSWORD="$PASSWORD"

        # Wait for PostgreSQL to be ready
        if pg_isready -h "$PGHOST" -p "$PGPORT" -U "$USER" -d "$PGDATABASE"; then
            echo "PostgreSQL is ready. Executing initialization scripts..."

            # Set environment variables for PostgreSQL connection
            export PGUSER="$USER"
            export PGPASSWORD="$PASSWORD"
            export PGHOST="$DB_HOST"
            export PGPORT="$DB_PORT"
            export PGDATABASE="$DB_NAME"
            export PGSSLMODE="$DB_SSL_MODE"

            for script in "$SCRIPT_DIR"/*_initialization.sh; do
                if [[ -x "$script" ]]; then
                    echo "Running $script..."
                    "$script"
                else
                    echo "Skipping $script (not executable)"
                fi
            done
        else
            echo "PostgreSQL is not ready. Skipping script execution."
        fi
    else
        echo "Missing or empty credentials. Skipping script execution."
    fi

  application_initialization.sh: |-
    #!/bin/bash

    DB_NAME=$(< /config/postgrest/db)
    DB_SCHEMA=$(< /config/postgrest/schema)

    MANAGED_USER_FILE="/secret/postgrest/user"
    MANAGED_PASSWORD_FILE="/secret/postgrest/password"

    MANAGED_USER=$(<"$MANAGED_USER_FILE")
    MANAGED_PASSWORD=$(<"$MANAGED_PASSWORD_FILE")

    MIGRATION_USER_FILE="/secret/migration/user"
    MIGRATION_PASSWORD_FILE="/secret/migration/password"

    MIGRATION_USER=$(<"$MIGRATION_USER_FILE")
    MIGRATION_PASSWORD=$(<"$MIGRATION_PASSWORD_FILE")

    VJOB_USER_FILE="/secret/vectorizationjob/user"
    VJOB_PASSWORD_FILE="/secret/vectorizationjob/password"

    VJOB_USER=$(<"$VJOB_USER_FILE")
    VJOB_PASSWORD=$(<"$VJOB_PASSWORD_FILE")

    POSTGREST_ROLES_PATH="/config/application-roles"

    # Set environment variables for PostgreSQL connection

    {{- if .Values.global.configuration.application.createDB }}

    # Create the PostgREST database if it does not exist
    echo "Checking if database '$DB_NAME' exists..."
    if ! $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$INIT_DB_NAME" -lqt | cut -d \| -f 1 | grep -qw "$DB_NAME"; then
      echo "Creating database '$DB_NAME'..."
      $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$INIT_DB_NAME" -c "CREATE DATABASE \"$DB_NAME\";"
      echo "Database '$DB_NAME' created."
    else
      echo "Database '$DB_NAME' already exists."
    fi
    {{- end }}
    {{- if .Values.global.configuration.application.createUser }}

    # Create the PostgREST user if it does not exist
    echo "Creating PostgREST user if it does not exist..."
    echo "Managed User: $MANAGED_USER"
    $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$DB_NAME" <<EOF
    DO \$\$
    BEGIN
      IF NOT EXISTS (
          SELECT FROM pg_catalog.pg_roles WHERE rolname = '${MANAGED_USER}'
      ) THEN
          EXECUTE format(
              'CREATE ROLE %I LOGIN NOINHERIT CREATEDB NOCREATEROLE NOSUPERUSER PASSWORD %L',
              '${MANAGED_USER}', '${MANAGED_PASSWORD}'
          );
      ELSE
          EXECUTE format(
              'ALTER ROLE %I WITH PASSWORD %L',
              '${MANAGED_USER}', '${MANAGED_PASSWORD}'
          );
      END IF;
    END
    \$\$;
    EOF
    echo "PostgREST user '$MANAGED_USER' present."

    # Create the Migration user if it does not exist
    echo "Creating Migration user if it does not exist..."
    echo "Migration User: $MIGRATION_USER"
    $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$DB_NAME" <<EOF
    DO \$\$
    BEGIN
      IF NOT EXISTS (
          SELECT FROM pg_catalog.pg_roles WHERE rolname = '${MIGRATION_USER}'
      ) THEN
          EXECUTE format(
              'CREATE ROLE %I LOGIN NOINHERIT CREATEDB NOCREATEROLE NOSUPERUSER PASSWORD %L',
              '${MIGRATION_USER}', '${MIGRATION_PASSWORD}'
          );
      ELSE
          EXECUTE format(
              'ALTER ROLE %I WITH PASSWORD %L',
              '${MIGRATION_USER}', '${MIGRATION_PASSWORD}'
          );
      END IF;
    END
    \$\$;
    EOF
    echo "Migration user '$MIGRATION_USER' present."

    # Create the Vectorization Job user if it does not exist
    echo "Creating Vectorization Job user if it does not exist..."
    echo "Vectorization Job User: $VJOB_USER"
    $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$DB_NAME" <<EOF
    DO \$\$
    BEGIN
      IF NOT EXISTS (
          SELECT FROM pg_catalog.pg_roles WHERE rolname = '${VJOB_USER}'
      ) THEN
          EXECUTE format(
              'CREATE ROLE %I LOGIN NOINHERIT CREATEDB NOCREATEROLE NOSUPERUSER PASSWORD %L',
              '${VJOB_USER}', '${VJOB_PASSWORD}'
          );
      ELSE
          EXECUTE format(
              'ALTER ROLE %I WITH PASSWORD %L',
              '${VJOB_USER}', '${VJOB_PASSWORD}'
          );
      END IF;
    END
    \$\$;
    EOF
    echo "Vectorization Job user '$VJOB_USER' present."
    {{- end }}
    {{- if .Values.global.configuration.application.createSchema }}

    # Create the PostgREST schema if it does not exist
    echo "Checking if schema '$DB_SCHEMA' exists in database '$DB_NAME'..."
    if ! $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$DB_NAME" -tAc "SELECT 1 FROM information_schema.schemata WHERE schema_name = '$DB_SCHEMA'" | grep -q 1; then
      echo "Creating schema '$DB_SCHEMA' in database '$DB_NAME'..."
      $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$DB_NAME" -c "CREATE SCHEMA \"$DB_SCHEMA\";"
      echo "Schema '$DB_SCHEMA' created in database '$DB_NAME'."

      $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$DB_NAME" -c "CREATE EXTENSION IF NOT EXISTS \"pgcrypto\" SCHEMA \"${DB_SCHEMA}\";"
    else
      echo "Schema '$DB_SCHEMA' already exists in database '$DB_NAME'."
    fi

    # Grant privileges to the managed user
    echo "Granting privileges to user '$MANAGED_USER' on schema '$DB_SCHEMA' in database '$DB_NAME'..."
    $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$DB_NAME" -c "GRANT ALL ON SCHEMA \"$DB_SCHEMA\" TO \"${MANAGED_USER}\";"
    echo "User '$MANAGED_USER' granted privileges on schema '$DB_SCHEMA'."

    # Grant privileges to the Migration user
    echo "Granting privileges to user '$MIGRATION_USER' on schema '$DB_SCHEMA' in database '$DB_NAME'..."
    $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$DB_NAME" -c "GRANT ALL ON SCHEMA \"$DB_SCHEMA\" TO \"${MIGRATION_USER}\";"
    echo "User '$MIGRATION_USER' granted privileges on schema '$DB_SCHEMA'."

    # Grant privileges to the Vectorization Job user
    echo "Granting privileges to user '$VJOB_USER' on schema '$DB_SCHEMA' in database '$DB_NAME'..."
    $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$DB_NAME" -c "GRANT USAGE ON SCHEMA \"$DB_SCHEMA\" TO \"${VJOB_USER}\";"
    echo "User '$VJOB_USER' granted privileges on schema '$DB_SCHEMA'."
    {{- end }}

    # Create and Grant the PostgREST roles if they do not exist
    echo "Processing PostgREST roles from directory: $POSTGREST_ROLES_PATH"
    for role_file in "$POSTGREST_ROLES_PATH"/*; do
      if [[ -f "$role_file" ]]; then
        ROLE_NAME=$(<"$role_file")
        echo "Processing PostgREST role: $ROLE_NAME"

        # Create the role with NOLOGIN if it does not exist
        $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$DB_NAME" <<EOF
    DO \$\$
    BEGIN
      IF NOT EXISTS (
          SELECT FROM pg_catalog.pg_roles WHERE rolname = '${ROLE_NAME}'
      ) THEN
          EXECUTE format(
              'CREATE ROLE %I NOLOGIN',
              '${ROLE_NAME}'
          );
      END IF;
    END
    \$\$;
    EOF
        echo "Role '$ROLE_NAME' present."

        # Grant USAGE on the schema to the role
        echo "Granting USAGE on schema '$DB_SCHEMA' to role '$ROLE_NAME'..."
        $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$DB_NAME" -c "GRANT USAGE ON SCHEMA \"$DB_SCHEMA\" TO \"${ROLE_NAME}\";"
        echo "Role '$ROLE_NAME' granted USAGE on schema '$DB_SCHEMA'."

        # Allow impersonation: grant PostgREST user to the role
        echo "Granting role '$ROLE_NAME' to PostgREST user '$MANAGED_USER'..."
        $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$DB_NAME" -c "GRANT \"${ROLE_NAME}\" TO \"${MANAGED_USER}\";"
        echo "Role '$ROLE_NAME' granted to PostgREST user '$MANAGED_USER'."

        echo "Role '$ROLE_NAME' processed."
      fi
    done

    echo "PostgREST initialization completed."

  keycloak_initialization.sh: |-
    #!/bin/bash

    DB_NAME=$(< /config/keycloak/db)
    DB_SCHEMA=$(< /config/keycloak/schema)

    MANAGED_USER_FILE="/secret/keycloak/user"
    MANAGED_PASSWORD_FILE="/secret/keycloak/password"

    MANAGED_USER=$(<"$MANAGED_USER_FILE")
    MANAGED_PASSWORD=$(<"$MANAGED_PASSWORD_FILE")

    # Set environment variables for PostgreSQL connection
    {{- if .Values.global.configuration.keycloak.createDB }}

    # Create the keycloak database if it does not exist
    if ! $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$INIT_DB_NAME" -lqt | cut -d \| -f 1 | grep -qw "$DB_NAME"; then
      echo "Creating database '$DB_NAME'..."
      $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$INIT_DB_NAME" -c "CREATE DATABASE \"$DB_NAME\";"
      echo "Database '$DB_NAME' created."
    else
      echo "Database '$DB_NAME' already exists."
    fi
    {{- end }}
    {{- if .Values.global.configuration.keycloak.createUser }}

    # Create the keycloak user if it does not exist
    echo "Creating Keycloak user if it does not exist..."
    echo "Managed User: $MANAGED_USER"
    $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$DB_NAME" <<EOF
    DO \$\$
    BEGIN
      IF NOT EXISTS (
          SELECT FROM pg_catalog.pg_roles WHERE rolname = '${MANAGED_USER}'
      ) THEN
          EXECUTE format(
              'CREATE ROLE %I LOGIN NOINHERIT CREATEDB NOCREATEROLE NOSUPERUSER PASSWORD %L',
              '${MANAGED_USER}', '${MANAGED_PASSWORD}'
          );
      ELSE
          EXECUTE format(
              'ALTER ROLE %I WITH PASSWORD %L',
              '${MANAGED_USER}', '${MANAGED_PASSWORD}'
          );
      END IF;
    END
    \$\$;
    EOF
    echo "Keycloak user '$MANAGED_USER' present."
    {{- end }}
    {{- if .Values.global.configuration.keycloak.createSchema }}

    # Create the keycloak schema if it does not exist
    echo "Checking if schema '$DB_SCHEMA' exists in database '$DB_NAME'..."
    if ! $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$DB_NAME" -tAc "SELECT 1 FROM information_schema.schemata WHERE schema_name = '$DB_SCHEMA'" | grep -q 1; then
      echo "Creating schema '$DB_SCHEMA' in database '$DB_NAME'..."
      $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$DB_NAME" -c "CREATE SCHEMA \"$DB_SCHEMA\";"
      echo "Schema '$DB_SCHEMA' created in database '$DB_NAME'."
    else
      echo "Schema '$DB_SCHEMA' already exists in database '$DB_NAME'."
    fi

    # Grant privileges to the managed user
    echo "Granting privileges to user '$MANAGED_USER' on schema '$DB_SCHEMA' in database '$DB_NAME'..."
    $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$DB_NAME" -c "GRANT ALL ON SCHEMA \"$DB_SCHEMA\" TO \"${MANAGED_USER}\";"
    echo "User '$MANAGED_USER' granted privileges on schema '$DB_SCHEMA'."
    {{- end }}

    echo "Keycloak initialization completed."

  {{- if .Values.global.configuration.vectorStore.enabled }}
  vector_store_initialization.sh: |-
    #!/bin/bash

    DB_NAME=$(< /config/vectorstore/db)
    DB_SCHEMA=$(< /config/vectorstore/schema)

    MANAGED_USER_FILE="/secret/vectorstore/user"
    MANAGED_PASSWORD_FILE="/secret/vectorstore/password"

    MANAGED_USER=$(<"$MANAGED_USER_FILE")
    MANAGED_PASSWORD=$(<"$MANAGED_PASSWORD_FILE")

    # Define the PostgreSQL connection string
    DB_CONN="${BASE_DB_CONN}/${DB_NAME}?sslmode=${DB_SSL_MODE}"
    {{- if .Values.global.configuration.vectorStore.createDB }}

    # Create the vectorStore database if it does not exist
    if ! $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$INIT_DB_NAME" -lqt | cut -d \| -f 1 | grep -qw "$DB_NAME"; then
      echo "Creating database '$DB_NAME'..."
      $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$INIT_DB_NAME" -c "CREATE DATABASE \"$DB_NAME\";"
      echo "Database '$DB_NAME' created."
    else
      echo "Database '$DB_NAME' already exists."
    fi
    {{- end }}
    {{- if .Values.global.configuration.vectorStore.createUser }}

    # Create the vectorStore user if it does not exist
    echo "Creating Vector Store user if it does not exist..."
    echo "Managed User: $MANAGED_USER"
    $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$DB_NAME" <<EOF
    DO \$\$
    BEGIN
      IF NOT EXISTS (
          SELECT FROM pg_catalog.pg_roles WHERE rolname = '${MANAGED_USER}'
      ) THEN
          EXECUTE format(
              'CREATE ROLE %I LOGIN NOINHERIT CREATEDB NOCREATEROLE NOSUPERUSER PASSWORD %L',
              '${MANAGED_USER}', '${MANAGED_PASSWORD}'
          );
      ELSE
          EXECUTE format(
              'ALTER ROLE %I WITH PASSWORD %L',
              '${MANAGED_USER}', '${MANAGED_PASSWORD}'
          );
      END IF;
    END
    \$\$;
    EOF
    echo "Vector Store user '$MANAGED_USER' present."
    {{- end }}
    {{- if .Values.global.configuration.vectorStore.createSchema }}

    # Create the vectorStore schema if it does not exist
    echo "Checking if schema '$DB_SCHEMA' exists in database '$DB_NAME'..."
    if ! $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$DB_NAME" -tAc "SELECT 1 FROM information_schema.schemata WHERE schema_name = '$DB_SCHEMA'" | grep -q 1; then
      echo "Creating schema '$DB_SCHEMA' in database '$DB_NAME'..."
      $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$DB_NAME" -c "CREATE SCHEMA \"$DB_SCHEMA\";"
      echo "Schema '$DB_SCHEMA' created in database '$DB_NAME'."

      $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$DB_NAME" -c "CREATE EXTENSION IF NOT EXISTS \"vector\" SCHEMA \"${DB_SCHEMA}\";"
    else
      echo "Schema '$DB_SCHEMA' already exists in database '$DB_NAME'."
    fi

    # Grant privileges to the managed user
    echo "Granting privileges to user '$MANAGED_USER' on schema '$DB_SCHEMA' in database '$DB_NAME'..."
    $PSQL -h "$DB_HOST" -p "$DB_PORT" -U "$USER" -d "$DB_NAME" -c "GRANT ALL ON SCHEMA \"$DB_SCHEMA\" TO \"${MANAGED_USER}\";"
    echo "User '$MANAGED_USER' granted privileges on schema '$DB_SCHEMA'."
    {{- end }}

    echo "Vector Store initialization completed."
{{- end }}

  clean_admin_secret.sh: |-
    #!/bin/bash

    KUBECTL=`which kubectl`
    cd /workdir

    NAMESPACE="{{ .Release.Namespace }}"

    echo "Cleaning up admin credentials secret in namespace ${NAMESPACE}..."
    echo $(${KUBECTL} -n ${NAMESPACE} get secret admin-db-credentials)
    ${KUBECTL} -n ${NAMESPACE} patch secret admin-db-credentials --type=json -p='[{"op": "remove", "path": "/data/user"}]' 2>/dev/null || echo "Key 'user' not present or failed to remove."
    ${KUBECTL} -n ${NAMESPACE} patch secret admin-db-credentials --type=json -p='[{"op": "remove", "path": "/data/password"}]' 2>/dev/null || echo "Key 'password' not present or failed to remove."
    echo "Admin credentials secret cleaned up."
{{- end }}